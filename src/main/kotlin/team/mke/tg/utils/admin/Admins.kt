package team.mke.tg.utils.admin

import org.jetbrains.exposed.sql.transactions.transaction
import ru.raysmith.tgbot.core.handler.EventHandler
import ru.raysmith.tgbot.core.handler.base.CallbackQueryHandler
import ru.raysmith.tgbot.core.handler.base.CommandHandler
import ru.raysmith.tgbot.core.handler.base.isCommand
import ru.raysmith.tgbot.model.bot.BotCommand
import ru.raysmith.tgbot.model.network.CallbackQuery
import ru.raysmith.tgbot.utils.BotFeature
import ru.raysmith.tgbot.utils.message.MessageAction
import ru.raysmith.tgbot.utils.message.message
import ru.raysmith.tgbot.utils.pagination.Pagination
import ru.raysmith.tgbot.utils.toChatId
import team.mke.tg.*
import team.mke.utils.exposed.suspendTransaction

/** /admin */
val BotCommand.Companion.ADMIN_MENU get() = "admin"

/** /admins */
val BotCommand.Companion.ADMINS get() = "admins"


val CallbackQuery.Companion.ADMINS_PAGE_PREFIX get() = "admins_pages_"
val CallbackQuery.Companion.ADMINS_PROVIDE_PREFIX get() = "admins_provide_"


suspend fun <U : BaseTgUser<*>> EventHandler.sendAdminsMessage(users: Iterable<U>, action: MessageAction, page: Int = Pagination.PAGE_FIRST) = message(action) {
    suspendTransaction {
        text = "–û—Ç–º–µ—á–µ–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≥–∞–ª–æ—á–∫–∞–º–∏ —è–≤–ª—è—é—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º–∏"
        inlineKeyboard {
            pagination(users, CallbackQuery.ADMINS_PAGE_PREFIX, page) { user ->
                val prefix = if (user.isAdmin) "‚òë " else "üî≤ "
                val name = (user.phone?.let { "($it) " } ?: "") + this@sendAdminsMessage.getChat(user.id.value.toChatId()).getFullName()
                button(prefix + name, CallbackQuery.ADMINS_PROVIDE_PREFIX + user.id)
            }
        }
    }
}

/**
 * –î–æ–±–∞–≤–ª—è–µ—Ç –º–µ–Ω—é –ø–æ [–∫–æ–º–∞–Ω–¥–µ][ADMINS] —Å–æ —Å–ø–∏—Å–∫–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
 * –î–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.
 *
 * @param tgUser —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
 * @param userSelector –ª—è–º–±–¥–∞ —Ä–µ–∞–ª–∏–∑—É—é—â–∞—è [TgUserSelector]
 * @param usersSelector –ª—è–º–±–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—â–∞—è —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö [*–≤–∞–ª–∏–¥–Ω—ã—Ö*][BaseTgUserTable.valid] –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * */
data class AdminsFeature<U : BaseTgUser<*>>(val tgUser: U, val userSelector: TgUserSelector<Long, U>, val usersSelector: () -> Iterable<U>) : BotFeature {
    override suspend fun handle(handler: EventHandler, handled: Boolean) {
        if (!tgUser.isAdmin) return

        when(handler) {
            is CallbackQueryHandler -> with(handler) {
                isPage(CallbackQuery.ADMINS_PAGE_PREFIX) {
                    sendAdminsMessage(usersSelector(), MessageAction.EDIT, it)
                }
                isDataStartWith(CallbackQuery.ADMINS_PROVIDE_PREFIX) { userId ->
                    suspendTransaction {
                        if (userId.toLong() == tgUser.id.value) {
                            alert("–ù–µ–ª—å–∑—è —Å–Ω—è—Ç—å —Å —Å–µ–±—è —Ä–æ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
                            return@suspendTransaction
                        }
                        userSelector.select(userId.toLong())?.apply {
                            isAdmin = !isAdmin
                            if (isAdmin) {
                                send(chatId = userId.toLong().toChatId()) {
                                    textWithEntities {
                                        italic("–í—ã —Å—Ç–∞–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º")
                                    }
                                }
                            }
                            provideCommands()
                            sendAdminsMessage(usersSelector(), MessageAction.EDIT, getPreviousPage(CallbackQuery.ADMINS_PAGE_PREFIX))
                        }
                    }
                }
            }
            is CommandHandler -> with(handler) {
                isCommand(BotCommand.ADMINS) {
                    sendAdminsMessage(transaction { usersSelector() }, MessageAction.SEND)
                }
            }
            else -> error("AdminsFeature supports only CommandHandler and CallbackQueryHandler")
        }
    }
}